%%{
/*
 * Copyright (c) 2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

%%}
%/*
% * ======== linkcmd.xdt ========
% *  This is template file is used to generate a linker command file for
% *  executables.  It provides a single place where we can embed information
% *  necessary to load/run executables.
% *
% *  This template is expanded after the configuration script runs and the
% *  results placed in a file (with extension .xdl) associated with the
% *  executable.
% *
% *  Linker templates are passed the following arguments:
% *     $out        - an open file stream for the generated linker
% *                   command file
% *     $args[]     - an array of zero or more libraries that should be linked
% *                   with (in the order they appear in the argument list)
% *
% *  In addition to these arguments, there is a global variable named
% *  'this' that is set as follows:
% *     this        - the program object
% */
%
%var prog = this;    /* meaningful alias for this (== xdc.cfg.Program) */
/*
 * Do not modify this file; it is automatically generated from the template
 * linkcmd_iar.xdt in the ti.platforms.msp430 package and will be overwritten.
 */

/*
 * linking libraries
 */
%for (var i = 0; i < $args.length; i++) {
"`$args[i]`"
%}

%/*
% * Linker command file contributions from all loaded packages:
% */
%var _utils = xdc.loadCapsule("ti/targets/linkUtils.xs");
`_utils.genContributions($args)`

/*
 * define xdc runtime symbols
 */
%for (var sym in prog.symbol) {
    %var inst = prog.symbol[sym];
    %if ((typeof(inst) == 'number') && sym.match(/xdc_runtime_Startup/)) {
-D`sym`=`inst`
    %}
%}

%if (prog.platform.$orig.includeLinkCmdFile) {
%var rawVersion = parseFloat(prog.build.target.getRawVersion()).toFixed(2);
%var includeDir = prog.build.target.rootDir + "/config/";
%if (rawVersion >= 6.10) {
%    includeDir += "/linker/";
%}
%var fname = "lnk" + prog.cpu.deviceName.substring(3).toLowerCase() + ".xcl";
%var lnkFile = includeDir  + fname;
/*
 * define stack and heap sizes
 */
-D_STACK_SIZE=`prog.stack.toString(16)`
-D_DATA16_HEAP_SIZE=`prog.heap.toString(16)`
-D_DATA20_HEAP_SIZE=`prog.heap.toString(16)`

/*
 * Device specific linker command file
 */
-f "`lnkFile`"
%}

%/*
% * IAR does not support NOLOAD sections yet, so the xdcmeta section is
% * loaded in the CODE section as a temporary fix. And this section
% * allocation is commented out for now.
% */
%/* get section allocations */
%var _utils = xdc.loadCapsule("ti/platforms/msp430/linkUtils_iar.xs");
%var sections = _utils.genSections(prog);
%//`sections`

%/* force linker to include xdcmeta */
%var metasymbols = "__PLAT__,__ISA__,__ASM__,__TARG__";
%if (prog.build.target.binaryParser != null) {
%    metasymbols += ",__TRDR__";
%}
-g`metasymbols`
