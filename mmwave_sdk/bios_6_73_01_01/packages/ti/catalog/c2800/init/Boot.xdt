%%{
/*
 * Copyright (c) 2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

%%}
%/*
% *  ======== Boot.xdt ========
% *
% *! Revision History
% *! ================
% *! 07-Jun-2011 sg     Removed CLKINDIV
% *! 24-May-2011 sg     Add support for all PLL types (SDOCM00080609).
% *! 26-May-2009 agd    SDOCM00057270 don't use xdc.runtime if Program.system == null
% *! 27-Apr-2009 cmcc   Added Xintf configuration
% *! 17-Apr-2009 agd    Created
% */
% /* Don't generate Boot_init if this is a romimage */
% if (!Program.$$isrom && (Program.build.rtsName !== null)) {
%var Boot = xdc.module("ti.catalog.c2800.init.Boot");
    extern ti_catalog_c2800_init_Boot_disableWatchdog();
    extern ti_catalog_c2800_init_Boot_configurePll280x(xdc_UInt16 pllcrDIV);
    extern ti_catalog_c2800_init_Boot_configurePll281x(xdc_UInt16 pllcrDIV, xdc_UInt16 pllstsDIVSEL);
    extern ti_catalog_c2800_init_Boot_configurePll2802x(xdc_UInt16 pllcrDIV, xdc_UInt16 pllstsDIVSEL);
    extern ti_catalog_c2800_init_Boot_configurePll2834x(xdc_UInt16 pllcrDIV, xdc_UInt16 pllstsDIVSEL);
    extern ti_catalog_c2800_init_Boot_configEzdspXintf();

#if defined(__ti__)
#pragma CODE_SECTION(ti_catalog_c2800_init_Boot_init, ".text:.bootCodeSection")
#pragma CODE_SECTION(ti_catalog_c2800_init_Boot_50usDelay, ".text:.bootCodeSection")
#endif

/*
 *  ======== ti_catalog_c2800_init_Boot_init ========
 */
xdc_Void ti_catalog_c2800_init_Boot_init()
{
%if (Boot.disableWatchdog == true) {
    ti_catalog_c2800_init_Boot_disableWatchdog();
%}
%if (Boot.configurePll == true) {
%if (Boot.pllType == Boot.Type_280x) {
    ti_catalog_c2800_init_Boot_configurePll280x(`Boot.pllcrDIV`);
%}
%else if (Boot.pllType == Boot.Type_281x) {
    ti_catalog_c2800_init_Boot_configurePll281x(`Boot.pllcrDIV`, `Boot.pllstsDIVSEL`);
%}
%else if (Boot.pllType == Boot.Type_282xx_283xx) {
    /* share function with 2802x_2803x_2806x ... */
    ti_catalog_c2800_init_Boot_configurePll2802x(`Boot.pllcrDIV`, `Boot.pllstsDIVSEL`);
%}
%else if (Boot.pllType == Boot.Type_2802x_2803x_2806x) {
    ti_catalog_c2800_init_Boot_configurePll2802x(`Boot.pllcrDIV`, `Boot.pllstsDIVSEL`);
%}
%else if (Boot.pllType == Boot.Type_2834x) {
    ti_catalog_c2800_init_Boot_configurePll2834x(`Boot.pllcrDIV`, `Boot.pllstsDIVSEL`);
%}
%}
%if (Boot.enableEzdspXintfConfig == true) {
    ti_catalog_c2800_init_Boot_configEzdspXintf();
%}
}

%var freq       =    Program.cpu.clockRate;
%var loopCount  =    (50.0 * freq) / 5.0;
%var lo16       =    loopCount & 0xffff;
%var hi16       =    (loopCount & 0xffff0000) >> 16;
/*
 *  ======== ti_catalog_c2800_init_Boot_50usDelay ========
 */
xdc_Void ti_catalog_c2800_init_Boot_50usDelay()
{
asm("   MOV     @AH,#`hi16`;\n                          \
        MOV     @AL,#`lo16`;\n                          \
");
asm("_ti_catalog_c2800_init_Boot_loop:\n                \
        SUB     ACC,#1;\n                               \
        BF      _ti_catalog_c2800_init_Boot_loop,GEQ;\n \
");
}
/*
 *  ======== ti_catalog_c2800_init_Boot_limpAbort ========
 */
xdc_Void ti_catalog_c2800_init_Boot_limpAbort(xdc_Void)
{
%var cname;
%       cname = String(Boot.limpAbortFunction);
%       cname = cname.substr(1);
    extern `cname`();
    `cname`();
}
%}
