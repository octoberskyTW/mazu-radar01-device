var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

/*
 * Configure the application to run only on Core0.
 */
var Core = xdc.useModule('ti.sysbios.family.arm.v7r.tms570.Core');
Core.numCores = 1;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x2000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x1000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x400;

/* Create the required tasks. */
var tskParams = new Task.Params;
tskParams.instance.name = "tsk0";
tskParams.arg0 = 1;
tskParams.arg1 = 2;
tskParams.priority = 1;
tskParams.vitalTaskFlag = false;
Program.global.tsk0 = Task.create('&tsk0Fxn', tskParams);

tskParams = new Task.Params;
tskParams.instance.name = "tsk1";
tskParams.arg0 = 11;
tskParams.arg1 = 12;
tskParams.priority = 1;
tskParams.vitalTaskFlag = false;
Program.global.tsk1 = Task.create('&tsk1Fxn', tskParams);

tskParams = new Task.Params;
tskParams.instance.name = "tsk2";
tskParams.arg0 = 21;
tskParams.arg1 = 22;
tskParams.priority = 1;
tskParams.vitalTaskFlag = false;
Program.global.tsk2 = Task.create('&tsk2Fxn', tskParams);

LoggerBuf.TimestampProxy = xdc.useModule('xdc.runtime.Timestamp');

/* Create default logger for the whole system. */
var LoggerBufParams = new LoggerBuf.Params;
var logger0 = LoggerBuf.create(LoggerBufParams);
Defaults.common$.logger = logger0;

/* Turn on USER1 logs in Task module */
Task.common$.diags_USER1 = Diags.RUNTIME_ON;

/* Turn on INFO logs in Main module (all non-modules) */
Main.common$.diags_INFO = Diags.RUNTIME_ON;

System.SupportProxy = SysMin;

/* Create a semaphore */
Program.global.sem0 = Semaphore.create(0);

/* Add idle function */
Idle.addFunc('&idl0Fxn');
