var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');

/*
 * Define the SYS/BIOS thread types to be enabled
 */
BIOS.swiEnabled = true;
BIOS.clockEnabled = true;
BIOS.taskEnabled = false;

/*
 * Select the simplest lock function available (since runtime support functions
 * are not called from multiple threads)
 */
BIOS.rtsGateType = BIOS.NoLocking;

/* Minimize the size of BIOS' default heap for the system */
BIOS.heapSize = 0x0;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 */
BIOS.libType = BIOS.LibType_Custom;

/*
 * Disable logging by BIOS modules for the custom library build
 */
BIOS.logsEnabled = false;

/*
 * Disable assert checking in BIOS modules for the custom library build
 */
BIOS.assertsEnabled = false;

/* Use SysMin as the as the System support proxy */
System.SupportProxy = SysMin;

/* Minimize the print buffer size (since System_printf() is not called) */
SysMin.bufSize = 0;

/* Minimize the size of the exit handler array in System */
System.maxAtexitHandlers = 0;

/*
 * Disable loading of module names to the target.
 * Setting this parameter to false saves space in the .const section, but Error
 * and Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 * Comment out this line to load module names onto the target.
 */
Defaults.common$.namedModule = false;

/*
 * Disable the error print function.  Disabling the raiseHook saves some code
 * space if the app is not using System_printf() (since the Error_print()
 * function calls System_printf()), but, we lose error information.
 * Comment out this line to enable the Error print function.
 */
Error.raiseHook = null;

/*
 * Disable loading of Error, Assert, and Log text strings to the target.
 * Setting this parameter to false saves space in the .const section, but
 * Error, Assert and Log messages will print raw ids and args instead of
 * fully formatted messages.
 * Comment out this line to enable loading of text strings to the target.
 */
Text.isLoaded = false;

/*
 * Specify a STATIC_POLICY memory policy to save code and data space.
 * Comment out this line if you want to dynamically create instance objects.
 */
Defaults.common$.memoryPolicy = xdc.module('xdc.runtime.Types').STATIC_POLICY;


/*
 * Application-specific configuration
 */

/* Define the system stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Create a Swi with default parameters */
Program.global['swi'] = Swi.create('&mySwiFxn');

/* Create a Clock object whose function is invoked every 500 Clock ticks */
var clkParams = new Clock.Params();
clkParams.startFlag = true;
clkParams.period = 500;
Program.global.clk = Clock.create("&myClkFxn", 500, clkParams);

var Boot = xdc.useModule('ti.sysbios.family.arm.cc26xx.Boot');
Boot.trimDevice = true;

/*
 * Set 'customerConfig' to cause the Boot module to provide a default
 * customer configuration structure.  This default structure is good to get
 * simple kernel apps to run, but more advanced apps may provide a customized
 * configuration structure and should set this parameter to 'false'.
 */
Boot.customerConfig = true;

/*
 * Link with the driverlib provided within the kernel release.  Set this to 'false'
 * to link with a different driverlib.
 */
Boot.provideDriverlib = true;
