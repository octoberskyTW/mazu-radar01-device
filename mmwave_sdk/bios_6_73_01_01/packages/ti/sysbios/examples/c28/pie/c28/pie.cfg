var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Task = xdc.useModule("ti.sysbios.knl.Task");

/* Create a task with priority 2 */
var taskParams = new Task.Params();
taskParams.priority = 2;
var myTask = Task.create('&myTaskFxn', taskParams);

/*
 * Create a LoggerBuf and make it the default logger for all modules.
 */
var LoggerBufParams = new LoggerBuf.Params();
LoggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(LoggerBufParams);
Defaults.common$.logger = logger0;

Main.common$.diags_INFO = Diags.ALWAYS_ON;

Program.stack = 0x100;

/*
 * Create two Hwi instances for PIE group 1.
 *
 * Using the mappings found in the table "PIE MUXed Peripheral Interrupt Vector
 * Table" (found in the SYS/BIOS API Documentation), the following mappings for
 * interrupt number can be found:
 *
 *  PIE group 1, interrupt 1 -> interrupt number 32
 *
 *  PIE group 1, interrupt 5 -> interrupt number 36
 *
 * Both PIE interrupts are also configured to run the interrupt service routine
 * 'myIsr()' when triggered.
 */

/* PIE group 1, interrupt 1 */
var interruptNum = 32;
var hwiParams = new Hwi.Params();
hwiParams.arg = interruptNum;
hwiParams.enableAck = true;
hwiParams.maskSetting = Hwi.MaskingOption_BITMASK;
hwiParams.disableMask = 0x0;
hwiParams.restoreMask = 0x0;
Hwi.create(interruptNum, "&myIsr", hwiParams);

/* PIE group 1, interrupt 5 */
interruptNum = 36;
hwiParams.arg = interruptNum;
hwiParams.enableAck = true;
hwiParams.maskSetting = Hwi.MaskingOption_BITMASK;
hwiParams.disableMask = 0x0;
hwiParams.restoreMask = 0x0;
Hwi.create(interruptNum, "&myIsr", hwiParams);

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = true;
