%%{
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%%}
%/*
% *  ======== Hwi.xdt ========
% */
%/*
% * Do not generate the vector table if this is a ROM assembly.
% */
%var Hwi = xdc.module("ti.sysbios.family.c28.Hwi");
%var len = Hwi.interrupt.length;
%var cname;
%var vectors = new Array(len);
%var vsorted = new Array(len);
%for (var i = 0; i < len; i++) {
%    cname = String(Hwi.interrupt[i].pfxn);
%    if (cname == "null")  {
%        cname = "ti_sysbios_family_c28_Hwi_unPluggedInterrupt__I";
%    }
%    else {
%        cname = cname.substr(1);  /* chop off leading '&' needed by .cfg */
%    }
%
%    vectors[i] = cname;
%    vsorted[i] = cname;
%}
%

% // sort the names so that we can add the necessary extern prototypes ...
%vsorted.sort();
%cname = null;
%for (i=0; i < len; i++) {
%    if (cname != vsorted[i]) {
%        cname = vsorted[i];
extern Void `cname`(Void);
%    }
%}

/* Interrupt vector table.  This will be copied to 0xd00 at boot time. */
const UInt32 ti_sysbios_family_c28_Hwi_vectors[] = {
%
%for (var i = 0; i < len; i++) {
%    cname = vectors[i];
%    if (cname.match("ti_sysbios_family_c28_Hwi_dispatchTable")) {
    /* `i` */  (UInt32)`cname` + (3 * (`i`-1)),
%    }
%    else {
    /* `i` */  (UInt32)`cname`,
%    }
%}
};

extern cregister volatile UInt IER;

%/* Generate the Hwi_[disable/enable/restore] functions */
%if (Hwi.zeroLatencyIERMask == 0) {

/*
 * ======== NON-ZERO LATENCY IMPLEMENTATION ========
 */

/*
 * ======== Hwi_startup ========
 */
Void ti_sysbios_family_c28_Hwi_startup__E()
{
    __enable_interrupts();
}

/*
 * ======== Hwi_disable ========
 */
UInt ti_sysbios_family_c28_Hwi_disable__E()
{
    UInt key;

    key = __disable_interrupts();

    return (key);
}

/*
 *  ======== Hwi_enable ========
 */
UInt ti_sysbios_family_c28_Hwi_enable__E()
{
    UInt key;

    key = __enable_interrupts();

    return (key);
}

/*
 *  ======== Hwi_restore ========
 */

Void ti_sysbios_family_c28_Hwi_restore__E(UInt key)
{
    __restore_interrupts(key);
}

/*
 *  ======== Hwi_disableIER ========
 */
Bits16 ti_sysbios_family_c28_Hwi_disableIER__E(Bits16 mask)
{
    UInt key;
    Bits16 oldIER;

    key = __disable_interrupts();

    oldIER = IER;
    IER &= ~mask;

    __restore_interrupts(key);

    return (oldIER);
}

/*
 *  ======== Hwi_enableIER ========
 */
Bits16 ti_sysbios_family_c28_Hwi_enableIER__E(Bits16 mask)
{
    UInt key;
    Bits16 oldIER;

    key = __disable_interrupts();

    oldIER = IER;
    IER |= mask;

    __restore_interrupts(key);

    return (oldIER);
}

/*
 *  ======== Hwi_restoreIER ========
 */
Bits16 ti_sysbios_family_c28_Hwi_restoreIER__E(Bits16 mask)
{
    UInt key;
    Bits16 oldIER;

    key = __disable_interrupts();

    oldIER = IER;
    IER = mask;

    __restore_interrupts(key);

    return (oldIER);
}
%}
%else {

/*
 * ======== ZERO LATENCY IMPLEMENTATION ========
 */

/*
 * ======== Hwi_startup ========
 */
Void ti_sysbios_family_c28_Hwi_startup__E()
{
    ti_sysbios_family_c28_Hwi_enable__E();
    __enable_interrupts();
}

/*
 * ======== Hwi_disable ========
 */
UInt ti_sysbios_family_c28_Hwi_disable__E()
{
    UInt key;
    UInt intmKey;

    intmKey  = __disable_interrupts();

    if (ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable == FALSE) {
        key = 0;
    }
    else {
        key = 1;
        ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable = FALSE;

        IER &= `Hwi.zeroLatencyIERMaskStr`;
    }

    __restore_interrupts(intmKey);

    return (key);
}

/*
 *  ======== Hwi_enable ========
 */
UInt ti_sysbios_family_c28_Hwi_enable__E()
{
    UInt key;
    UInt intmKey;

    intmKey  = __disable_interrupts();

    if (ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable) {
        key = 1;
    }
    else {
        key = 0;
        ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable = TRUE;

        IER |= ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER;
    }

    __restore_interrupts(intmKey);

    return (key);
}

/*
 *  ======== Hwi_restore ========
 */
Void ti_sysbios_family_c28_Hwi_restore__E(UInt key)
{
    UInt intmKey;

    intmKey  = __disable_interrupts();

    if (key == 1 && ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable == FALSE) {
        ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable = TRUE;

        IER |= ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER;
    }
    else if (key == 0 && ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable) {
        ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable = 0;

        IER &= `Hwi.zeroLatencyIERMaskStr`;
    }

    __restore_interrupts(intmKey);
}

/*
 *  ======== Hwi_disableIER ========
 */
Bits16 ti_sysbios_family_c28_Hwi_disableIER__E(Bits16 mask)
{
    Bits16 nonZeroIER, oldIER;
    UInt intmKey;

    nonZeroIER = mask & `Hwi.nonZeroLatencyIERMaskStr`;

    intmKey = __disable_interrupts();

    oldIER = IER | ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER;

    ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER &= ~nonZeroIER;

    if (ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable == FALSE) {
        /* only twiddle Zero-latency IER bits while global ints are disabled */
        IER &= ~(mask & `Hwi.zeroLatencyIERMask`);
    }
    else {
        /* twiddle ALL IER bits when global ints are enabled */
        IER &= ~(mask | ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER);
    }

    __restore_interrupts(intmKey);

    return (oldIER);
}

/*
 *  ======== Hwi_enableIER ========
 */
Bits16 ti_sysbios_family_c28_Hwi_enableIER__E(Bits16 mask)
{
    Bits16 nonZeroIER, oldIER;
    UInt intmKey;

    nonZeroIER = mask & `Hwi.nonZeroLatencyIERMaskStr`;

    intmKey = __disable_interrupts();

    oldIER = IER | ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER;

    ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER |= nonZeroIER;

    if (ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable == FALSE) {
        /* only twiddle Zero-latency IER bits while global ints are disabled */
        IER |= (mask & `Hwi.zeroLatencyIERMask`);
    }
    else {
        /* twiddle ALL IER bits when global ints are enabled */
        IER |= (mask | ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER);
    }

    __restore_interrupts(intmKey);

    return (oldIER);
}

/*
 *  ======== Hwi_restoreIER ========
 */
Bits16 ti_sysbios_family_c28_Hwi_restoreIER__E(Bits16 mask)
{
    Bits16 nonZeroIER, oldIER;
    UInt intmKey;

    nonZeroIER = mask & `Hwi.nonZeroLatencyIERMaskStr`;

    intmKey = __disable_interrupts();

    oldIER = IER | ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER;

    ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER = nonZeroIER;

    if (ti_sysbios_family_c28_Hwi_Module__state__V.globalEnable == FALSE) {
        /* only twiddle Zero-latency IER bits while global ints are disabled */
        IER = (mask & `Hwi.zeroLatencyIERMask`);
    }
    else {
        /* twiddle ALL IER bits when global ints are enabled */
        IER = (mask | ti_sysbios_family_c28_Hwi_Module__state__V.shadowIER);
    }

    __restore_interrupts(intmKey);

    return (oldIER);
}

%}

