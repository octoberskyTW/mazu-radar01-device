%%{
/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
%%}
%%{
/*
 *  ======== Mmu.xdt ========
 */
%%}

#include <string.h>
#include <ti/sysbios/family/arm/a15/Mmu.h>

% var Mmu = xdc.module("ti.sysbios.family.arm.a15.Mmu");
% var BigEndian = (Program.build.target.model.endian == "big");
%
Void ti_sysbios_family_arm_a15_Mmu_clearTableBuf__I()
{
    memset(ti_sysbios_family_arm_a15_Mmu_Module_State_0_firstLevelTableBuf__A, 0,
        `Mmu.NUM_LEVEL1_ENTRIES` * 8);
%for (var i = 0; i < Mmu.NUM_LEVEL1_ENTRIES; i++) {
    memset(ti_sysbios_family_arm_a15_Mmu_Module_State_0_secondLevelTableBuf_`i`__A,
        0, `Mmu.NUM_LEVEL2_ENTRIES` * 8);
%}
}

Void ti_sysbios_family_arm_a15_Mmu_initFirstLevelTableBuf__I()
{
    UInt64 desc;
%for (var i = 0; i < Mmu.NUM_LEVEL1_ENTRIES; i++) {
%    if (Mmu.firstLevelTableBuf[i * 2] != undefined) {
         desc = (`utils.toHex(Mmu.firstLevelTableBuf[i * 2 + (0 ^ BigEndian)])` & 0xFFF) |
         ((UInt32)(ti_sysbios_family_arm_a15_Mmu_Module_State_0_secondLevelTableBuf_`i`__A) & 0xFFFFF000) |
         ((UInt64)(`utils.toHex(Mmu.firstLevelTableBuf[(i * 2) + (1 ^ BigEndian)])`) &
         0xFFF00000) << 32;
         ti_sysbios_family_arm_a15_Mmu_Module_State_0_firstLevelTableBuf__A[`i`] = desc;
%    }
%}
}

#if defined(__GNUC__) && !defined(__ti__)
Void __attribute__((naked)) ti_sysbios_family_arm_a15_Mmu_initSecondLevelTableBuf__I()
{
    __asm__ __volatile__ (
%for (var i = 0; i < Mmu.NUM_LEVEL1_ENTRIES; i++) {
        "movw r0, #:lower16:ti_sysbios_family_arm_a15_Mmu_Module_State_0_secondLevelTableBuf_`i`__A \n\t"
        "movt r0, #:upper16:ti_sysbios_family_arm_a15_Mmu_Module_State_0_secondLevelTableBuf_`i`__A \n\t"
%    for (var j = 0; j < 512; j++) {
%        if (Mmu.secondLevelTableBuf[i][j * 2] != undefined) {
        "movw r2, #`utils.toHex((Mmu.secondLevelTableBuf[i][j * 2 + (0 ^ BigEndian)]) & 0xFFFF)` \n\t"
        "movt r2, #`utils.toHex(((Mmu.secondLevelTableBuf[i][j * 2 + (0 ^ BigEndian)]) >> 16) & 0xFFFF)` \n\t"
        "movw r1, #`utils.toHex(j * 8)` \n\t"
        "str  r2, [r0, r1] \n\t"
        "movw r2, #`utils.toHex((Mmu.secondLevelTableBuf[i][j * 2 + (1 ^ BigEndian)]) & 0xFFFF)` \n\t"
        "movt r2, #`utils.toHex(((Mmu.secondLevelTableBuf[i][j * 2 + (1 ^ BigEndian)]) >> 16) & 0xFFFF)` \n\t"
        "movw r1, #`utils.toHex(j * 8 + 4)` \n\t"
        "str  r2, [r0, r1] \n\t"
%        }
%    }
%}
        "bx lr"
                         );
}
#endif
