;
;  Copyright (c) 2015, Texas Instruments Incorporated
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
; ======== Hwi_asm_switch.sv7R ========
;

        .cdecls C,NOLIST,"package/internal/Hwi.xdc.h"

        .state32

        .global ti_sysbios_family_xxx_Hwi_switchAndRunFunc
        .global ti_sysbios_family_xxx_Hwi_switchAndRunDispatchC

ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V .tag ti_sysbios_family_arm_v7r_vim_Hwi_Module_State

;
;  ======== ti_sysbios_family_xxx_Hwi_switchAndRunFunc ========
;  ti_sysbios_family_xxx_Hwi_switchAndRunFunc(Void (*func)());
;
;  Switch to ISR stack, call the function Func() and then switch
;  back to Task stack.
;
        .armfunc ti_sysbios_family_xxx_Hwi_switchAndRunFunc
ti_sysbios_family_xxx_Hwi_switchAndRunFunc:
        .asmfunc
        push    {r4, r14}
        movw    r1, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
        movt    r1, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
        ldr     r4, [r1]        ; old taskSP
        cmp     r4, #0          ; on ISR stack already?
        bne     callFunc        ; branch if yes
        str     sp, [r1]        ; save SP into taskSP
        movw    sp, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.isrStack
        movt    sp, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.isrStack
                                ; switch to isrStack
        ldr     sp, [sp]

callFunc:
        blx     r0              ; Call func

        cmp     r4, #0          ; lowest order ISR?
        bne     exitFunc0       ; branch if not
        movw    r1, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
        movt    r1, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
                                ; yes, restore
        ldr     sp, [r1]        ; interrupted task's SP
        str     r4, [r1]        ; signal return to TaskStack

exitFunc0:
        pop     {r4, r14}
        bx      lr              ; return
        .endasmfunc

;
;  ======== ti_sysbios_family_xxx_Hwi_switchAndRunDispatchC ========
;  ti_sysbios_family_xxx_Hwi_switchAndRunDispatchC(
;      Hwi_Irp irp, Void (*dispatchC)(Hwi_Irp irp));
;
;  Switch to ISR stack, call the dispatchC function and then switch
;  back to Task stack.
;
        .armfunc ti_sysbios_family_xxx_Hwi_switchAndRunDispatchC
ti_sysbios_family_xxx_Hwi_switchAndRunDispatchC:
        .asmfunc
        push    {r4, r14}
        movw    r2, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
        movt    r2, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
        ldr     r4, [r2]        ; old taskSP
        cmp     r4, #0          ; on ISR stack already?
        bne     callDispatchC   ; branch if yes
        str     sp, [r2]        ; save SP into taskSP
        movw    sp, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.isrStack
        movt    sp, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.isrStack
                                ; switch to isrStack
        ldr     sp, [sp]

callDispatchC:
        blx     r1              ; Call dispatchC func

        cmp     r4, #0          ; lowest order ISR?
        bne     exitFunc1       ; branch if not
        movw    r2, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
        movt    r2, ti_sysbios_family_arm_v7r_vim_Hwi_Module__state__V.taskSP
                                ; yes, restore
        ldr     sp, [r2]        ; interrupted task's SP
        str     r4, [r2]        ; signal return to TaskStack

exitFunc1:
        pop     {r4, r14}
        bx      lr              ; return
        .endasmfunc

        .end
