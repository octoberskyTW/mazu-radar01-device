;
;  Copyright (c) 2014, Texas Instruments Incorporated
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;
; ======== Hwi_asm.s470 ========
;
;

        .cdecls C,LIST
        %{
            #define ti_sysbios_family_arm_a8_Mmu__internalaccess
            #include <ti/sysbios/family/arm/a8/Mmu.h>
            #include "package/internal/Hwi.xdc.h"
        %}

        .state32

        .global ti_sysbios_family_arm_a8_intcps_Hwi_dispatchIRQ__I
        .global ti_sysbios_family_arm_a8_intcps_Hwi_dispatchIRQC__I
        .global ti_sysbios_family_arm_a8_intcps_Hwi_excHandlerAsm__I
        .global ti_sysbios_family_arm_a8_intcps_Hwi_excHandlerDataAsm__I
        .global ti_sysbios_family_arm_a8_intcps_Hwi_excHandler__I
        .global ti_sysbios_family_arm_a8_intcps_Hwi_init__I
        .global ti_sysbios_family_arm_a8_intcps_Hwi_initVbar__I
        .global ti_sysbios_family_arm_a8_intcps_Hwi_vectors
        .global ti_sysbios_family_arm_a8_intcps_Hwi_intc
        .global ti_sysbios_family_xxx_Hwi_switchToTaskStack
        .global ti_sysbios_family_xxx_Hwi_switchToIsrStack

ti_sysbios_family_arm_a8_Mmu_Module__state__V        .tag ti_sysbios_family_arm_a8_Mmu_Module_State
ti_sysbios_family_arm_a8_intcps_Hwi_Module__state__V .tag ti_sysbios_family_arm_a8_intcps_Hwi_Module_State

;
;  ======== Hwi_dispatchIRQ ========
;
;  Here on IRQ interrupt
;
;  task stack while in C code (With ASID tagging):
;
;       sp + 0x30 =  cpsr_sys
;       sp + 0x2c =  RA
;       sp + 0x28 =  lr_sys
;       sp + 0x24 =  saved r12
;       sp + 0x20 =  saved r7
;       sp + 0x1c =  saved r6
;       sp + 0x18 =  saved r5
;       sp + 0x14 =  saved r4
;       sp + 0x10 =  saved r3
;       sp + 0x0c =  saved r2
;       sp + 0x08 =  saved r1
;       sp + 0x04 =  saved r0
;       sp + 0x00 =  tskKey
;
;  task stack while in C code (Without ASID tagging):
;
;       sp + 0x28 =  cpsr_sys
;       sp + 0x24 =  RA
;       sp + 0x20 =  lr_sys
;       sp + 0x1C =  saved r12
;       sp + 0x18 =  saved r5
;       sp + 0x14 =  saved r4
;       sp + 0x10 =  saved r3
;       sp + 0x0c =  saved r2
;       sp + 0x08 =  saved r1
;       sp + 0x04 =  saved r0
;       sp + 0x00 =  tskKey
;

        .sect ".text:ti_sysbios_family_arm_a8_intcps_Hwi_dispatchIRQ__I"
        .clink
        .armfunc ti_sysbios_family_arm_a8_intcps_Hwi_dispatchIRQ__I
        .align  4

ti_sysbios_family_arm_a8_intcps_Hwi_dispatchIRQ__I:
        .asmfunc
        sub     lr, lr, #4
        srsdb   #0x1f           ; push sys CPSR and LR onto SYS stack
        cps     #0x1f           ; switch back to System mode
        sub     sp, sp, #8      ; back up below CPSR and LR
    .if (ti_sysbios_family_arm_a8_intcps_Hwi_enableAsidTagging__D)
        push    {r0-r7, r12, lr}; save required C registers
        ldr     r5, [sp, #40]   ; retrieve IRP
    .else
        push    {r0-r5, r12, lr}; save required C registers
        ldr     r5, [sp, #32]   ; retrieve IRP
    .endif

    .if __TI_VFP_SUPPORT__ | __TI_NEON_SUPPORT__
        vstmdb  {D0-D7}, r13!   ; save vfp scratch regs
        vstmdb  {D16-D31}, r13! ; save vfp scratch regs
        fmrx    r1, FPEXC
        fmrx    r2, FPSCR
        push    {r1-r2}
    .endif

    .if (ti_sysbios_family_arm_a8_intcps_Hwi_enableAsidTagging__D)
        ldr     r1, mmuTableBuf          ; get page table pointer
        ldr     r1, [r1]                 ; get page table address
        mrc     p15, #0, r6, c13, c0, #1 ; save old ASID in r6
        mrc     p15, #0, r7, c2, c0, #0  ; save mmu table address in r7
        dmb
        mov     r2, #0xFF
        mcr     p15, #0, r2, c13, c0, #1 ; change ASID to 255
        isb
        mcr     p15, #0, r1, c2, c0, #0  ; write new table address to TTBR
        isb
        mov     r2, #0x0
        mcr     p15, #0, r2, c13, c0, #1 ; change ASID to 0 (Full Access)
        isb
    .endif

        mov     r4, sp          ; save sp
        bic     sp, sp, #0x7    ; align task stack to 8 bytes
        movw    r1, ti_sysbios_family_arm_a8_intcps_Hwi_taskDisable__C
        movt    r1, ti_sysbios_family_arm_a8_intcps_Hwi_taskDisable__C
        ldr     r1, [r1]
        cmp     r1, #0
        blxne   r1              ; call Task_disable()
        push    {r0}            ; save tskKey

        ; switch to isr stack
        movw    r1, ti_sysbios_family_xxx_Hwi_switchToIsrStack
        movt    r1, ti_sysbios_family_xxx_Hwi_switchToIsrStack
        blx     r1
        push    {r0}            ; save oldTaskSP

        mov     r0, r5          ; pass IRP as argument to dispatchIRQC
        mov     r5, sp          ; save sp
        bic     sp, sp, #0x7    ; align isr stack to 8 bytes

        movw    r1, ti_sysbios_family_arm_a8_intcps_Hwi_dispatchIRQC__I
        movt    r1, ti_sysbios_family_arm_a8_intcps_Hwi_dispatchIRQC__I
        blx     r1

        mov     sp, r5          ; restore sp

        ; switch back to task stack if at the bottom of Hwi stack
        pop     {r0}            ; restore oldTaskSP
        movw    r1, ti_sysbios_family_xxx_Hwi_switchToTaskStack
        movt    r1, ti_sysbios_family_xxx_Hwi_switchToTaskStack
        blx     r1
        pop     {r0}            ; restore tskKey

        ; run task scheduler
        movw    r1, ti_sysbios_family_arm_a8_intcps_Hwi_taskRestoreHwi__C
        movt    r1, ti_sysbios_family_arm_a8_intcps_Hwi_taskRestoreHwi__C
        ldr     r1, [r1]
        cmp     r1, #0
        blxne   r1              ; call Task_restoreHwi()
                                ; returns with interrupts disabled
        mov     sp, r4          ; restore sp

    .if (ti_sysbios_family_arm_a8_intcps_Hwi_enableAsidTagging__D)
        dmb
        mov     r2, #0xFF
        mcr     p15, #0, r2, c13, c0, #1 ; change ASID to 255
        isb
        mcr     p15, #0, r7, c2, c0, #0  ; restore mmu table address
        isb
        mcr     p15, #0, r6, c13, c0, #1 ; restore ASID
        isb
    .endif

    .if __TI_VFP_SUPPORT__ | __TI_NEON_SUPPORT__
        pop     {r1-r2}
        fmxr    FPEXC, r1
        fmxr    FPSCR, r2
        vldmia  {D16-D31}, r13! ; restore vfp scratch regs
        vldmia  {D0-D7}, r13!   ; restore vfp scratch regs
    .endif

    .if (ti_sysbios_family_arm_a8_intcps_Hwi_enableAsidTagging__D)
        pop     {r0-r7, r12, lr}
    .else
        pop     {r0-r5, r12, lr}
    .endif
        rfeia   sp!
        .endasmfunc

    .if (ti_sysbios_family_arm_a8_intcps_Hwi_enableAsidTagging__D)
mmuTableBuf:
        .word   ti_sysbios_family_arm_a8_Mmu_Module__state__V.tableBuf
    .endif

;
;  ======== Hwi_init ========
;  Low level ARM mode-specific register initialization
;

        .sect ".text:ti_sysbios_family_arm_a8_intcps_Hwi_init__I"
        .clink
        .armfunc ti_sysbios_family_arm_a8_intcps_Hwi_init__I

ti_sysbios_family_arm_a8_intcps_Hwi_init__I:
        .asmfunc

; Initialize FIQ sp
        mrs     r12, cpsr
        bic     r12, r12, #0x1f ; switch to FIQ mode
        orr     r12, r12, #0x11 ; to initialize FIQ sp
        msr     cpsr_cf, r12    ;

        mov     sp, r0          ; sp = initial fiq stack

; Done
        mrs     r12, cpsr
        orr     r12, r12, #0x1f ; switch back to SYS mode
        msr     cpsr_cf, r12    ;

        bx      lr
        .endasmfunc

;
;  ======== Hwi_initVbar ========
;  Set vector table base address
;

        .sect ".text:ti_sysbios_family_arm_a8_intcps_Hwi_initVbar__I"
        .clink
        .armfunc ti_sysbios_family_arm_a8_intcps_Hwi_initVbar__I

ti_sysbios_family_arm_a8_intcps_Hwi_initVbar__I:
        .asmfunc

; Set vector table base address
        movw    r0, ti_sysbios_family_arm_a8_intcps_Hwi_vectors
        movt    r0, ti_sysbios_family_arm_a8_intcps_Hwi_vectors
        mcr     p15, #0, r0, c12, c0, #0

        bx      lr
        .endasmfunc

        .end
