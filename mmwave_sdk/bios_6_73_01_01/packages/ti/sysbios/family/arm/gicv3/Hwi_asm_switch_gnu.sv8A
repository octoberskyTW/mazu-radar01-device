/*
 *  Copyright (c) 2016, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *  *  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *  *  Neither the name of Texas Instruments Incorporated nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/*
 * ======== Hwi_asm_switch_gnu.sv8A ========
 */

        .global ti_sysbios_family_arm_gicv3_Hwi_initStacks__I
        .global ti_sysbios_family_xxx_Hwi_switchAndRunFunc

        .align  4

/*
 *  ======== ti_sysbios_family_xxx_Hwi_switchAndRunFunc ========
 *  ti_sysbios_family_xxx_Hwi_switchAndRunFunc(Void (*func)());
 *
 *  Switch to ISR stack, call the function Func() and then switch
 *  back to Task stack.
 */

        .section .text.ti_sysbios_family_xxx_Hwi_switchAndRunFunc, "ax"
        .func ti_sysbios_family_xxx_Hwi_switchAndRunFunc

ti_sysbios_family_xxx_Hwi_switchAndRunFunc:
        stp     x19, x30, [sp, #-16]!
        mrs     x19, spsel
        cmp     x19, #0
        bne     1f
        msr     spsel, #1       /* Switch to SP_EL1 */
1:
        blr     x0
        cmp     x19, #0
        bne     2f
        msr     spsel, #0       /* Switch back to SP_EL0 */
2:
        ldp     x19, x30, [sp], #16
        ret
        .endfunc

/*
 *  ======== Hwi_initStacks ========
 *  Copy the current SP to SP_EL0 and switch to it. Load the ISR
 *  stack base address to SP_EL1. The CPU will automatically
 *  switch to SP_EL1 on an exception and switch back to SP_EL0 on
 *  a return from an exception.
 */

        .section .text.ti_sysbios_family_arm_gicv3_Hwi_initStacks__I, "ax"
        .func ti_sysbios_family_arm_gicv3_Hwi_initStacks__I

ti_sysbios_family_arm_gicv3_Hwi_initStacks__I:
        mov     x1, sp
        msr     sp_el0, x1      /* Copy current SP to SP_EL0 */
        mov     sp, x0          /* Set SP_EL1 to base of ISR stack */
        msr     spsel, #0       /* Switch to SP_EL0 from SP_EL1 */
        ret
        .endfunc

        .end
