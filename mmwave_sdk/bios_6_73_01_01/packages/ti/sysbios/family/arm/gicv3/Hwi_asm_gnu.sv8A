/*
 *  Copyright (c) 2016, Texas Instruments Incorporated
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  *  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *  *  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *  *  Neither the name of Texas Instruments Incorporated nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/*
 * ======== Hwi_asm_gnu.sv8A ========
 */

#include <ti/sysbios/family/arm/gicv3/HwiMacros.h>

        .global ti_sysbios_family_arm_gicv3_Hwi_dispatchIRQ__I
        .global ti_sysbios_family_arm_gicv3_Hwi_getTaskSP__E
        .global ti_sysbios_family_arm_gicv3_Hwi_init__E

        .align  2

/*
 *  ======== Hwi_dispatchIRQ ========
 *
 *  Void Hwi_dispatchIRQ(Bool usingEL0Stack);
 */

        .section .text.ti_sysbios_family_arm_gicv3_Hwi_dispatchIRQ__I, "ax"
        .func ti_sysbios_family_arm_gicv3_Hwi_dispatchIRQ__I

ti_sysbios_family_arm_gicv3_Hwi_dispatchIRQ__I:
        mov     x19, x0              /* copy 'usingEL0Stack' argument */
        mrs     x0, spsr_el1
        mrs     x1, elr_el1
        stp     x0, x1, [sp, #-16]!  /* save spsr_el1 and elr_el1 */
#if defined(__ARM_FP)
        mrs     x0, fpcr
        mrs     x1, fpsr
        stp     x0, x1, [sp, #-16]!  /* save fpcr and fpsr */
#endif
        cbz     x19, 1f              /* check if currently on task stack */
        msr     spsel, #1            /* switch to isr stack */
1:
        ldr     x0, =ti_sysbios_family_arm_gicv3_Hwi_taskDisable__C
        ldr     x0, [x0]
        cbz     x0, 2f
        blr     x0                   /* call Task_disable() */
2:
        stp     x0, x1, [sp, #-16]!  /* save tskKey */

        /* call dispatchIRQC */
        mrs     x0, elr_el1          /* pass IRP to dispatchIRQC() */
        ldr     x1, =ti_sysbios_family_arm_gicv3_Hwi_dispatchIRQC__I
        blr     x1

        ldp     x0, x1, [sp], #16    /* restore tskKey */
        cbz     x19, 3f              /* check if in lowest order IRQ */
        msr     spsel, #0            /* switch to SP_EL0 */
3:
        ldr     x1, =ti_sysbios_family_arm_gicv3_Hwi_taskRestoreHwi__C
        ldr     x1, [x1]
        cbz     x1, 4f
        blr     x1                   /* call Task_restoreHwi() */
4:                                   /* returns with interrupts disabled */
#if defined(__ARM_FP)
        ldp     x0, x1, [sp], #16
        msr     fpcr, x0
        msr     fpsr, x1
#endif
        ldp     x0, x1, [sp], #16
        msr     spsr_el1, x0
        msr     elr_el1, x1
#if defined(__ARM_FP)
        POP_CALLER_SAVE_FPU_REGS sp  /* restore vfp scratch regs */
#endif
        POP_CALLER_SAVE_CPU_REGS sp  /* restore cpu scratch regs */
        eret
        .endfunc

/*
 *  ======== Hwi_getTaskSP ========
 *  Return pre-empted task's SP
 */

        .section .text.ti_sysbios_family_arm_gicv3_Hwi_getTaskSP__E, "ax"
        .func ti_sysbios_family_arm_gicv3_Hwi_getTaskSP__E

ti_sysbios_family_arm_gicv3_Hwi_getTaskSP__E:
        mrs     x0, sp_el0           /* Copy SP_EL0 to X0 */
        ret
        .endfunc

/*
 *  ======== Hwi_init ========
 *  Low level ARM mode-specific register initialization
 */

        .section .text.ti_sysbios_family_arm_gicv3_Hwi_init__E, "ax"
        .func ti_sysbios_family_arm_gicv3_Hwi_init__E

ti_sysbios_family_arm_gicv3_Hwi_init__E:
        ldr     x0, =ti_sysbios_family_arm_gicv3_Hwi_vectors
        msr     vbar_el1, x0         /* Set vector table base address */
        ret
        .endfunc

        .end
