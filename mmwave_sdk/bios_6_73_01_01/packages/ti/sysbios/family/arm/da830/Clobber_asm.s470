;
; ======== Clobber_asm.s470 ========
;
;

;       .cdecls C,NOLIST,"package/internal/Hwi.xdc.h"

        .state32

    .if __TI_EABI_ASSEMBLER
        .asg ti_sysbios_family_arm_da830_Clobber_trashRegs__F, _ti_sysbios_family_arm_da830_Clobber_trashRegs__F 
;       .asg ti_sysbios_family_arm_da830_Clobber_postIntr__F, _ti_sysbios_family_arm_da830_Clobber_postIntr__F 
        .asg ti_sysbios_family_arm_da830_Clobber_checkRegs__F, _ti_sysbios_family_arm_da830_Clobber_checkRegs__F
    .endif

        .global _ti_sysbios_family_arm_da830_Clobber_trashRegs__F
;       .global _ti_sysbios_family_arm_da830_Clobber_postIntr__F
        .global _ti_sysbios_family_arm_da830_Clobber_checkRegs__F

;
; ======== Clobber_trashRegs ========
; Trash the saved-by-parent registers r0-r3, r12
;

        .armfunc _ti_sysbios_family_arm_da830_Clobber_trashRegs__F
        .sect ".text:_ti_sysbios_family_arm_da830_Clobber_trashRegs"
        .align  4
        .clink
        
_ti_sysbios_family_arm_da830_Clobber_trashRegs__F:
        .asmfunc

        add     r0, r0, #0
        add     r1, r0, #1
        add     r2, r0, #2
        add     r3, r0, #3
        add     r12, r0, #12
        bx      lr
        .endasmfunc

;
; ======== Clobber_postIntr ========
; Wait for interrupt
;

;        .armfunc _ti_sysbios_family_arm_da830_Clobber_postIntr__F
;        .sect ".text:_ti_sysbios_family_arm_da830_Clobber_postIntr"
        .clink
        
;_ti_sysbios_family_arm_da830_Clobber_postIntr__F:
        .asmfunc
        bx      lr
        .endasmfunc

;
; ======== Clobber_checkRegs ========
; Verify the saved-by-parent registers r4 - r11
;

        .armfunc _ti_sysbios_family_arm_da830_Clobber_checkRegs__F
        .sect ".text:_ti_sysbios_family_arm_da830_Clobber_checkRegs"
        .clink
        
_ti_sysbios_family_arm_da830_Clobber_checkRegs__F:
        .asmfunc
        add     r0, r0, #1
        cmp     r1, r0
        bne     badexit
        add     r0, r0, #1
        cmp     r2, r0
        bne     badexit
        add     r0, r0, #1
        cmp     r3, r0
        bne     badexit
;       add     r0, r0, #9
;       cmp     r12, r0
;       bne     badexit
        mov     r0, #0
        bx      lr

badexit:
        mov     r0, #1
        bx      lr
        .endasmfunc

        .end

