%%{ --COPYRIGHT--,EPL
/*
 *Copyright (c) 2008 Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * --/COPYRIGHT--
*/
%%}
/* THIS IS A GENERATED FILE -- DO NOT EDIT */

%/**********************************/
%if (this.target) {
var targ = xdc.module('`this.target`');
%}
%else {
if (Build.targets.length == 0) {
    throw new Error("no targets defined in '`this.configbld`'");
}
%/* BUG: why is Build.targets[0] missing some config params? */
var targ = xdc.module(Build.targets[0].$spec.getQualName());
%}
%/**********************************/
%if (this.platform) {
/* configuro was told the platform explicitly */
var platform = '`this.platform`';
%}
%else {
var platform = targ.platform;
%}

/* decide whether to make an assembly or an executable */
%/* whole program profile means whole_program and whole_program_debug */
%if (!this.profile.match("^whole_program(|_debug)$")) {
var makeAssembly = false;
%}
%else {
var makeAssembly = targ instanceof xdc.module('ti.targets.ITarget').Module;
%}

%%{
    /* create xs options */
    var xsopts = [];
    if (this.defines) {
        for (var i = 0; i < this.defines.length; i++) {
            var def = this.defines[i];
            /* quote if any spaces or semicolons in the value of the variable */
            if (def.match(/[\s;]/)) {
                var def = def.replace(/^([^=]*)=(.*)/, '$1=\\"$2\\"');
            }
            xsopts.push("-D" + def);
        }
    }
    if (environment["xdc.cfg.SourceDir.outputDir"] != null) {
        xsopts.push("-Dxdc.cfg.SourceDir.outputDir='"
            + escape(environment["xdc.cfg.SourceDir.outputDir"])
            + "'");
    }
    if (this.exclude) {
        xsopts.push("-Dxdc.cfg.check.exclude='" + this.exclude + "'");
    }
    if (this.warn) {
        xsopts.push("-Dxdc.cfg.check.fatal=false");
    }
%%}

var Executable = xdc.module('xdc.bld.Executable');

var exeOpts = new Executable.Attrs({
        cfgScript: '`this.mkAbsolute(this.cfg)`',
        profile: '`this.profile`',
%if (this.linkTemplate != null) {
        linkTemplate: '`this.linkTemplate`',
%}
%if (this.rtsName != null) {
    %if (this.rtsName != "") {
        rtsName: '`this.rtsName`',
    %}
    %else {
        rtsName: null,
    %}
%}
        cfgHome: '`this.pkgName`',
%if (xsopts.length) {
        xsopts: "`xsopts.join(' ')`",
%}
});

exeOpts.cfgArgs = '`escape(this.cfgArgs)`';
exeOpts.cfgArgsEncoded = true;

var exe = Pkg[makeAssembly ? 'addAssembly': 'addExecutable'](
    '`this.exeName`',
    targ,
    platform,
    exeOpts
);

/*
 * Generate the compiler.opt file
 * Do this here instead of during the initial creation of the configuro
 * package, because the contents of any config.bld script are unknown
 * at that time. Config.bld can't be executed until the XDC build phase.
 */
if (makeAssembly) {
    var suffix = targ.dllExt || '.p' + targ.suffix;
}
else {
    var suffix = '.p' + targ.suffix;
}

var thisObj = {
    cfg:        '`this.cfg`',
    outputPath: '`this.outputPath`',
    exeName:    '`this.exeName`' + suffix,
    exeIntName: '`this.exeName`' + suffix.replace('.', '_'),
    targ:       targ,
    linkerCommandFile: '`this.linkerCommandFile`',
    compilerOptFile: '`this.compilerOptionsFile`',
    compilerDefsFile: '`this.compilerOptionsFile`' + ".defs",
    makeAssembly: makeAssembly
};
var tmpl = xdc.loadTemplate('xdc/tools/configuro/template/compiler.opt.xdt');
tmpl.genFile('`this.compilerOptionsFile`', thisObj, [], false);

/*
 * Generate the custom makefile.
 */
var tmpl = xdc.loadTemplate('xdc/tools/configuro/template/' + 
    (makeAssembly? 'custom.mak.asm.xdt' : 'custom.mak.exe.xdt'));
tmpl.genFile('custom.mak', thisObj, [], false);
Pkg.makeEpilogue = "include custom.mak";

/*
 * Generate the package script.
 */
var tmpl = xdc.loadTemplate('xdc/tools/configuro/template/package.xs.xdt');
tmpl.genFile('package.xs', thisObj, [], false);

if (makeAssembly) {
/*
 * Generate the linker options into a staging file, so that the presence or
 * age of the advertised linker command file can be the makefile trigger to
 * rebuild the package from the user's config script.
 */
    var tmpl = xdc.loadTemplate('xdc/tools/configuro/template/linker.cmd.asm.xdt');
    tmpl.genFile('`this.linkerCommandFile`.cp', thisObj, [], false);
}
